{"version":3,"sources":["Components/Post.js","Components/PostList.js","Components/TitleBar.js","Components/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["Post","expandedText","currentState","state","expanded","setState","this","className","props","title","alt","width","src","img_url","content","onClick","publish_date","Component","PostList","posts","map","i","key","TitleBar","Navbar","bg","variant","Brand","href","Nav","Link","Form","inline","FormControl","type","placeholder","Button","MainPage","fetch","method","then","response","json","jsonData","catch","err","console","log","length","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0UAmDeA,G,wBA9CX,aAAe,IAAD,8BACV,+CAmCJC,aAAe,WACX,IAAIC,EAAe,EAAKC,MAAMC,SAC9B,EAAKC,SAAS,CACVD,UAAWF,KArCf,EAAKC,MAAQ,CACTC,UAAU,GAHJ,E,sEASV,OAAIE,KAAKH,MAAMC,SAEP,yBAAKG,UAAU,gBACf,4BAAKD,KAAKE,MAAMC,OAChB,6BACA,yBAAKF,UAAU,UAAUG,IAAI,oBAAoBC,MAAM,QAAQC,IAAKN,KAAKE,MAAMK,UAC/E,yBAAKN,UAAU,eAAeD,KAAKE,MAAMM,SACzC,4BAAQC,QAAST,KAAKL,aAAcM,UAAU,cAA9C,aACA,6BACA,yBAAKA,UAAU,QAAQD,KAAKE,MAAMQ,eAKlC,yBAAKT,UAAU,QACf,4BAAKD,KAAKE,MAAMC,OAChB,6BACA,yBAAKF,UAAU,UAAUG,IAAI,oBAAoBC,MAAM,QAAQC,IAAKN,KAAKE,MAAMK,UAC/E,yBAAKN,UAAU,gBACf,4BAAQQ,QAAST,KAAKL,aAAcM,UAAU,eAA9C,aACA,6BACA,yBAAKA,UAAU,QAAQD,KAAKE,MAAMQ,mB,GAhC/BC,cCuBJC,E,iLAlBP,IAAMC,EAAQb,KAAKE,MAAMW,MACzB,OACIA,EAAMC,KAAI,SAACX,EAAOY,GAAR,OACN,kBAAC,EAAD,CACIC,IAAKD,EACLZ,MAAOU,EAAME,GAAGZ,MAChBK,QAASK,EAAME,GAAGP,QAClBD,QAASM,EAAME,GAAGR,QAClBG,aAAcG,EAAME,GAAGL,sB,GAXpBC,a,sDCsBRM,E,iLAlBP,OACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QAC1B,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,+BACA,kBAACC,EAAA,EAAD,CAAKtB,UAAU,WACb,kBAACsB,EAAA,EAAIC,KAAL,CAAUF,KAAK,SAAf,QACA,kBAACC,EAAA,EAAIC,KAAL,CAAUF,KAAK,aAAf,aAEF,kBAACG,EAAA,EAAD,CAAMC,QAAM,GACV,kBAACC,EAAA,EAAD,CAAaC,KAAK,OAAOC,YAAY,SAAS5B,UAAU,YACxD,kBAAC6B,EAAA,EAAD,CAAQV,QAAQ,gBAAhB,gB,GAbST,aCqCNoB,E,YAhCb,aAAe,IAAD,8BACV,+CACKlC,MAAQ,CACTgB,MAAO,IAHD,E,iFAOO,IAAD,OAChBmB,MAAM,sCAAsC,CAACC,OAAQ,QACpDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAQ,OAAI,EAAKtC,SAAS,CAAEc,MAAOwB,OACxCC,OAAM,SAAAC,GACHC,QAAQC,IAAI,e,+BAKhB,OAAgC,IAA5BzC,KAAKH,MAAMgB,MAAM6B,OACV,yBAAKzC,UAAU,YAClB,sEAKJ,yBAAKA,UAAU,YACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUY,MAAOb,KAAKH,MAAMgB,a,GA5BrBF,aCIRgC,G,uLAJX,OAAO,kBAAC,EAAD,U,GAFOhC,cCMEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.ee8efaa8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Post.css'\r\n\r\nclass Post extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            expanded: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        if (this.state.expanded) {\r\n            return (\r\n                <div className=\"expandedPost\">\r\n                <h2>{this.props.title}</h2>\r\n                <hr/>\r\n                <img className=\"postImg\" alt='basketball player' width=\"240px\" src={this.props.img_url} /> \r\n                <div className=\"postContent\">{this.props.content}</div>\r\n                <button onClick={this.expandedText} className=\"blueButton\">Read less</button>\r\n                <hr/>\r\n                <div className=\"date\">{this.props.publish_date}</div>\r\n                </div>  \r\n            )\r\n        } else {\r\n            return (\r\n                <div className=\"post\">\r\n                <h2>{this.props.title}</h2>\r\n                <hr/>\r\n                <img className=\"postImg\" alt='basketball player' width=\"240px\" src={this.props.img_url} /> \r\n                <div className=\"postContent\"></div>\r\n                <button onClick={this.expandedText} className=\"blackButton\">Read more</button>\r\n                <hr/>\r\n                <div className=\"date\">{this.props.publish_date}</div>\r\n                </div>  \r\n            )\r\n        }\r\n    }\r\n\r\n    expandedText = () => {\r\n        let currentState = this.state.expanded\r\n        this.setState({\r\n            expanded: !currentState\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Post;","import React, { Component } from 'react';\r\nimport './PostList.css';\r\n\r\nimport Post from './Post';\r\n\r\nclass PostList extends Component {\r\n    \r\n    render() {\r\n        const posts = this.props.posts\r\n        return (\r\n            posts.map((title, i) => \r\n                <Post\r\n                    key={i}\r\n                    title={posts[i].title}\r\n                    content={posts[i].content}\r\n                    img_url={posts[i].img_url}\r\n                    publish_date={posts[i].publish_date}\r\n                >\r\n                </Post>\r\n            )\r\n        )               \r\n    }\r\n}\r\n\r\n\r\n\r\nexport default PostList;","import React, { Component } from 'react';\r\nimport './TitleBar.css';\r\n\r\nimport {Navbar, Nav, Form, FormControl, Button} from 'react-bootstrap';\r\n\r\nclass TitleBar extends Component {\r\n    \r\n    render() {\r\n\r\n        return (\r\n            <Navbar bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Brand href=\"#home\">NBA焦點新聞</Navbar.Brand>\r\n            <Nav className=\"mr-auto\">\r\n              <Nav.Link href=\"#home\">Home</Nav.Link>\r\n              <Nav.Link href=\"#features\">Features</Nav.Link>\r\n            </Nav>\r\n            <Form inline>\r\n              <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\r\n              <Button variant=\"outline-info\">Search</Button>\r\n            </Form>\r\n          </Navbar>\r\n        )               \r\n    }\r\n}\r\n\r\n\r\n\r\nexport default TitleBar;","import React, { Component } from 'react';\r\n\r\nimport PostList from './PostList'\r\nimport './MainPage.css'\r\nimport TitleBar from './TitleBar';\r\n\r\n\r\n\r\nclass MainPage extends Component {\r\n    \r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            posts: [],\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://nba-drf.herokuapp.com/post/',{method: 'get'})\r\n        .then(response => response.json())\r\n        .then(jsonData => this.setState({ posts: jsonData}))\r\n        .catch(err => {\r\n            console.log('oooops')\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.posts.length === 0) {\r\n            return <div className=\"mainpage\">\r\n                <h1>Oooops, It looks like there's no news</h1>\r\n            </div> \r\n            \r\n        }\r\n        return (\r\n            <div className=\"mainpage\">\r\n                <TitleBar></TitleBar>\r\n                <PostList posts={this.state.posts}></PostList>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n  \r\n  export default MainPage","import React, { Component } from 'react';\n\n\nimport MainPage from './Components/MainPage'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component {\n  render() {\n    return <MainPage></MainPage>\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}